npm install -g create-react-app -->instalar create react 

create-react-app proyecto001  ---> crear proyecto

npm start  --> ejecutamos el proyecto dentro de la carpeta proyecto001


Archivos importantes 

   index.html <- index.js  <-app.js


Una restricción de JSX es que siempre los elementos HTML deben tener su marca de comienzo y fin, 
y en el caso que solo tengan una etiqueta que es tanto de comienzo como fin debemos agregar el caracter '/':

   <hr />
Para definir valores a las propiedades de un elementos HTML mediante expresiones no debemos disponer las comillas. 
Por ejemplo modifique el método render() y pruebe esto:

   render() {
    const buscadores=['http://www.google.com',
                      'http://www.bing.com',
                      'http://www.yahoo.com'];
    return (
      <div>
        <a href={buscadores[0]}>Google</a><br />
        <a href={buscadores[1]}>Bing</a><br />
        <a href={buscadores[2]}>Yahoo</a><br />                
      </div>
    );
  }


Una restricción del método render es que siempre debe retornar 
un elementos HTML que puede tener en su interior otros elementos anidados, 
pero nunca dos elementos HTML hermanos, esto genera un error:



Captura de Eventos 



onClick
onDoubleClick
onMouseEnter
onMouseLeave
onMouseMove
onKeyPress
onKetUp
onSubmit
etc

/////////////////////////////////////////////////////////ejemplo de react clases vs hooks ////////////////////////////////////////////////////////


import React, { Component } from 'react'

class Contador extends Component {
  state = { count: 0 } // inicializamos el state a 0

  render () {
    const { count } = this.state // extraemos el count del state

    return (
      <div>
        <p>Has hecho click {count} veces</p>
        { /* Actualizamos el state usando el método setState */ }
        <button onClick={() => this.setState({ count: count + 1 })}>
          Haz click!
        </button>
      </div>
    )
  }
}



// importamos useState, el hook para crear un state en nuestro componente
import React, { useState } from 'react'

function Contador() {
  // useState recibe un parámetro: el valor inicial del estado (que será 0)
  // y devuelve un array de dos posiciones:
  //  la primera (count), tiene el valor del estado
  //  la segunda (setCount), el método para actualizar el estado
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Has hecho click {count} veces</p>
      { /* actualizamos el state al hacer click con setCount */ }
      <button onClick={() => setCount(count + 1)}>
        Haz click!
      </button>
    </div>
  )
}




